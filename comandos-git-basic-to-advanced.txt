$ ssh-keygen -t rsa -b 4096 -C "your_email@example.com"
This creates a new ssh key, using the provided email as a label.

> Generating public/private rsa key pair.
When you're prompted to "Enter a file in which to save the key," press Enter. This accepts the default file location.

> Enter a file in which to save the key (/c/Users/you/.ssh/id_rsa):[Press enter]
At the prompt, type a secure passphrase. For more information, see "Working with SSH key passphrases".


## Adding your SSH key to the ssh-agent
> Start the ssh agent
$ eval $(ssh-agent -s)

Add your SSH private key to the ssh-agent. 
$ ssh-add ~/.ssh/id_rsa




Copy the SSH key to your clipboard.
$ clip < ~/.ssh/id_rsa.pub
Se não funcionar coipar na mão direto no Git Bash:
$ cat ~/.ssh/id_rsa.pub

Entrar no site do GIT e add lá em SETTIGNS


Testar conexão SSH
$ ssh -T git@github.com
Digitar yes

---------------------------------------------------------------------------------------------------------------------------


Iniciar o repositório
$ git init

Listar arquivos
$ ls -al

Adicionar arquivo novo
$ git add filename
$ git add . (add all)

Comitar arquivo
$ git commit

Dizer quem vc é
git config --global user.email "you@example.com"
git config --global user.name "name"

Ver o status do projeto
$ git status

Ver commits que foram feitos
$ git log

---------------------------------------------------------------------------------------------------------------------------
Sincronizar diretório local com o remoto

git remote add origin git@github.com:diegobvogel/ComandosGit.git

Mandar coisas pro repositório
$ git push (na primeira vez não funciona, usar o debaixo) 
$ git push -u origin master

---------------------------------------------------------------------------------------------------------------------------
Comandos básicos para fazer um commit numa branch

$ git add filename ('git add .' serve para adicionar todos os arquivos)
$ git commit (para sair do editor apertar ESC + : + qw)
$ git push (primeira vez usar 'git push -u origin master')

---------------------------------------------------------------------------------------------------------------------------
Diferença entre Git e Github

Git é o software que vc usa na sua máquina para fazer o commit dos arquivos
Github é o servidor remoto que armazena tudo isso, que controla as Branchs


---------------------------------------------------------------------------------------------------------------------------
Comando Git diff

$ git diff HEAD~1 (compara oq tem na pasta com o commit anterior)

Comparar dois commits
$ git diff <commit-id1> <commit-id2>

---------------------------------------------------------------------------------------------------------------------------
Comando Git clone

$ git clone <URL>
Ao usar o clone não precisa sincronizar o repo local com o remoto (git push -u origin master) isso ja é feito autimaticamente

---------------------------------------------------------------------------------------------------------------------------
Comando Git pull

$ git pull
Baixar conteúdo atualizado da branch

---------------------------------------------------------------------------------------------------------------------------
Comando Git checkout and revert

Verificar como um arquivo era anteriormente ou desfazer alterações de arquivos (voltar ao stado anterior)
$ git checkout <commit-id> <file>

Para voltar para o estado final (ultimo commit)
$ git checkout master

Desfazendo alterações de um arquivo
$ git checkout -- nomearquivo
$ git checkout -- . (para todos os arquivos)

Desfazendo alterações de um arquivo depois de ter dado 'git add'
$ git checkout HEAD -- nomearquivo

Desfazendo alterações de um arquivo depois de ter dado 'git commit'
$ git revert <commit-id>

---------------------------------------------------------------------------------------------------------------------------
Comando Git reset

CUIDADO
Apaga o que o commit faz
Não usar após ter dado o 'push', pois alguem já pode ter baixado

Voltar 1 commit para trás
$ git reset HEAD~1

Voltar 2 commits para trás
$ git reset HEAD~2

Reverter o commit e manter os arquivos no estado que estavam antes de comitar (permite fazer o commit novamente)
$ git reset HEAD~1 soft

Reverter o commit e remover as alterações feitas nos arquivos (NÃO permite fazer o commit novamente)
$ git reset HEAD~1 hard












































